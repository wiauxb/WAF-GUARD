services:

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    volumes:
      - ${DOCKER_DATA_PATH}/neo4j/logs:/logs
      - ${DOCKER_DATA_PATH}/neo4j/config:/config
      - ${DOCKER_DATA_PATH}/neo4j/data:/data
      # - ${DOCKER_DATA_PATH}/neo4j/plugins:/plugins
      - ${DOCKER_DATA_PATH}/neo4j/import:/import
      - ${EXPORT_DIR}:/import/exports
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true

    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: wget -O /dev/null "http://localhost:7474/" || exit 1
      interval: 5s
      timeout: 2s
      retries: 10
      start_period: 30s

  postgres:
    container_name: postgres
    build:
      context: ./docker
      dockerfile: postgres_dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: cwaf
    ports:
      - "5432:5432"
    volumes:
      - ${DOCKER_DATA_PATH}/postgres:/var/lib/postgresql/data
      - ${EXPORT_DIR}:/exports
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    
  adminer:
    container_name: adminer
    image: adminer
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
        restart: true


  fastapi:
    container_name: fastapi
    build: 
      dockerfile: fastapi_dockerfile
      context: ./docker
    volumes:
      - ${WEB_APP_PATH}:/app
      - ${DOCKER_DATA_PATH}/shared:/shared
      - ${EXPORT_DIR}:/exports
    environment:
      - NEO4J_URL=${NEO4J_URL}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - WAF_URL=${WAF_URL}
      - ANALYZER_URL=${ANALYZER_URL}
      - DELETE_BATCH_SIZE=${DELETE_BATCH_SIZE}
      - EXPORT_DIR=${EXPORT_DIR}
    working_dir: /app
    ports:
      - "8000:8000"
    command: "fastapi dev api/api.py --host 0.0.0.0 --port 8000"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      neo4j:
        condition: service_healthy
        restart: true
      waf:
        condition: service_started
        restart: true

  streamlit:
    container_name: streamlit
    build: 
      dockerfile: streamlit_dockerfile
      context: ./docker
    volumes:
      - ${WEB_APP_PATH}:/app
      - ${DOCKER_DATA_PATH}/shared:/shared
    environment:
      - API_URL=${API_URL}
      - CHAT_URL=${CHAT_URL}
    working_dir: /app
    ports:
      - "8501:8501"
    entrypoint: "streamlit run Interactions.py --server.port=8501 --server.address=0.0.0.0"
    depends_on:
      fastapi:
        condition: service_started
        restart: true

  waf:
    container_name: waf
    build:
      dockerfile: waf_dockerfile
      context: ./docker
    privileged: true
    volumes:
      - ${SRC_PATH}/waf_rest_api:/opt/api
    ports:
      - "9090:8000"
    working_dir: /opt/api
    command: "fastapi dev main.py --host 0.0.0.0 --port 8000"

  analyzer:
    container_name: analyzer
    build:
      dockerfile: analyzer_dockerfile
      context: ./docker
    environment:
      - RUNNING_IN_DOCKER=true
      - NEO4J_URL=${NEO4J_URL}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DELETE_BATCH_SIZE=${DELETE_BATCH_SIZE}
    volumes:
      - ${SRC_PATH}/analyzer:/app
    ports:
      - "8001:8000" 
    working_dir: /app
    tty: true
    command: "fastapi dev rest_api/api.py --host 0.0.0.0 --port 8000"
    depends_on:
      postgres:
          condition: service_healthy
          restart: true


  chatbot:
    container_name: chatbot
    build: 
      dockerfile: chatbot_dockerfile
      context: ./docker
    volumes:
      - ${CHATBOT_PATH}:/app
      - ${DOCKER_DATA_PATH}/chromadb:/chromadb
    working_dir: /app
    ports:
      - "8005:8005"
    environment:
      - API_URL=${API_URL}
      - NEO4J_URL=${NEO4J_URL}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      fastapi:
        condition: service_started
      neo4j:
        condition: service_started
      postgres:
        condition: service_started
      streamlit:
        condition: service_started
    entrypoint: "/start_chat.sh"